eval %sh{
    if ! [ -d $HOME/.config/kak ]; then
      mkdir -p $HOME/.config/kak
    fi
}

eval %sh{
    if ! [ -d $HOME/.config/kak/plugins/plug.kak ]; then
      mkdir -p $HOME/.config/kak/plugins/plug.kak
      git clone https://github.com/andreyorst/plug.kak.git ~/.config/kak/plugins/plug.kak
    fi
}

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

plug "kakoune-lsp/kakoune-lsp" do %{
    cargo install --force --path .
    cargo clean
} config %{
    # Logs for debugging purposes
    #set-option global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
    #set-option global lsp_debug true

    set-option global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\h\n,=;*(){}\[\]]\z<ret>'"
    set-option global lsp_diagnostic_line_error_sign "✗ "
    set-option global lsp_diagnostic_line_warning_sign "⚠ "
    hook global WinSetOption filetype=(c|cpp|rust|sh|lua|elm|go|python|haskell|wgsl|swift) %{
        map window user "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"
        lsp-enable-window
        lsp-auto-hover-disable
        lsp-auto-hover-insert-mode-disable
        set-option window lsp_hover_anchor false
        set-face window DiagnosticError default+u
        set-face window DiagnosticWarning default+u
    }

    hook global KakEnd .* lsp-exit
}

plug "your-tools/kak-subvert" do %{
    cargo install --force --path .
    cargo clean
} config %{
    unmap global user y ':enter-user-mode subvert<ret>'
    map global user c ':enter-user-mode subvert<ret>' -docstring 'enter subvert user mode'
}

map global normal '<c-f>' ': fzf-mode<ret>' -docstring 'fzf mode'
plug "andreyorst/fzf.kak" defer "fzf" %{
    set-option global fzf_preview_width '65%'
    set-option global fzf_window_map "ctrl-t"
    set-option global fzf_use_main_selection false
} defer "fzf-file" %{
    set-option global fzf_file_command "fd --hidden --exclude '/.git/' --exclude '/.mypy_cache/' --exclude '/__pycache__/' --type f --follow"
    set-option global fzf_highlight_command "bat"
} defer "fzf-grep" %{
    set-option global fzf_grep_command "rg --hidden --glob '!/.git/' --glob '!/.mypy_cache/' --glob '!/__pycache__/' --line-number --no-column --no-heading --color=never ''"
}

plug "delapouite/kakoune-text-objects"

plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global tabstop 4
    set-option global indentwidth 4
    set-option global softtabstop 4
    expandtab
} config %{
    hook global WinSetOption filetype=(css|sh) %{
        set-option window tabstop 2
        set-option window indentwidth 2
        set-option window softtabstop 2
    }

    hook global WinSetOption filetype=(go|makefile|gas) %{
        smarttab
    }
}

plug "alexherbo2/auto-pairs.kak" commit "3e529e8002fe07e952c3a895f50dc749eb2b40de" config %{
    hook global WinSetOption filetype=rust %{
        set-option buffer auto_pairs ( ) { } [ ] '"' '"' ` ` “ ” ‘ ’ « » ‹ ›
    }
}

plug "maximbaz/surround.kak.git" commit "f13b0ad8dfc9cca07fce25ca753139882a3acb69" %{
    map global user 's' ': surround<ret>'         -docstring "surround selection"
    map global user 'S' ': surround _ _ * *<ret>' -docstring 'Enter surround mode with extra surrounding pairs'
    set-option global surround_begin auto-pairs-disable
    set-option global surround_end auto-pairs-enable
}

plug "Anfid/cosy-termcolors.kak" theme config %{
    colorscheme cosy-termcolors
}

plug "andreyorst/powerline.kak" defer powerline %{
    set-option global powerline_format 'mode_info line_column position filetype bufname git'
    declare-option -hidden str powerline_color13 "black"         # fg: client
    declare-option -hidden str powerline_color12 "blue"          # bg: client
    declare-option -hidden str powerline_color15 "black"         # fg: session
    declare-option -hidden str powerline_color14 "blue"          # bg: session
    declare-option -hidden str powerline_color00 "black"         # fg: bufname
    declare-option -hidden str powerline_color03 "bright-white"  # bg: bufname
    declare-option -hidden str powerline_color10 "black"         # fg: filetype
    declare-option -hidden str powerline_color11 "bright-white"  # bg: filetype
    declare-option -hidden str powerline_color02 "black"         # fg: git
    declare-option -hidden str powerline_color04 "yellow"        # bg: git
    declare-option -hidden str powerline_color05 "black"         # fg: position
    declare-option -hidden str powerline_color01 "white"         # bg: position
    declare-option -hidden str powerline_color06 "black"         # fg: line-column
    declare-option -hidden str powerline_color09 "white"         # bg: line-column
    declare-option -hidden str powerline_color07 "white"         # fg: mode-info
    declare-option -hidden str powerline_color08 "bright-black"  # base background
    declare-option -hidden str powerline_next_bg %opt{powerline_color08}
    declare-option -hidden str powerline_base_bg %opt{powerline_color08}
} config %{
    powerline-start
}

plug "chriswalker/golang.kak"

plug "chambln/kakoune-readline" config %{
    hook global WinCreate .* %{
        readline-enable
        unmap window normal <c-e> i
    }
}

plug 'delapouite/kakoune-livedown'

plug 'occivink/kakoune-sudo-write'

try %{
    require-module x11
    set-option global termcmd 'kitty -1 sh -c'
}

set-option global ui_options terminal_assistant=none terminal_set_title=false terminal_wheel_scroll_amount=1
set-option global autoreload yes
set-option global windowing_placement vertical

hook global WinCreate .* %{
    add-highlighter window/ number-lines -hlcursor
    add-highlighter window/ show-whitespaces -lf ' '
    add-highlighter window/ show-matching
    git show-diff
}

# Autoformatting
hook global WinSetOption filetype=rust %{
    set buffer formatcmd "rustfmt --edition=2021"
}

hook global WinSetOption filetype=elm %{
    set buffer matching_pairs ( ) { } [ ]
    set buffer formatcmd "elm-format --stdin"
}

hook global WinSetOption filetype=go %{
    set buffer formatcmd "gofmt"
}

hook global WinSetOption filetype=(css|json|yaml|html) %{
    set buffer formatcmd "prettier --parser %opt[filetype]"
}

hook global WinSetOption filetype=python %{
    set buffer formatcmd "ruff format -"
}

hook global WinSetOption filetype=markdown %{
    set buffer formatcmd "mdformat --number --wrap 120 -"
}

hook global WinSetOption filetype=(rust|elm|go) %{
    hook -group autofmt buffer BufWritePre .* %{
        try %{
            format-buffer
        }
    }
}

hook global WinSetOption filetype=rust %{
    evaluate-commands %sh{
        # Substrate projects take insanely long time to build, so it's better to avoid enabling lsp-semantic-tokens
        # for such projects
        if [ ! -d "./pallets" ]; then
          printf '%s\n' 'hook buffer -group semantic-tokens BufReload .* lsp-semantic-tokens'
          printf '%s\n' 'hook buffer -group semantic-tokens NormalIdle .* lsp-semantic-tokens'
          printf '%s\n' 'hook buffer -group semantic-tokens InsertIdle .* lsp-semantic-tokens'
        fi
    }
}

hook global BufCreate .+\.(wgsl) %{
    set-option buffer filetype wgsl
}

define-command -params 0..1 -file-completion split %{
    evaluate-commands %sh{
        file="$1"
        if [ -z "$file" ]; then
          printf 'terminal kak -c "%s"\n' "$kak_session"
        else
          printf 'terminal kak -c "%s" "%s"\n' "$kak_session" "$file"
        fi
    }
}

# Modes
map global normal "'" ':'
map global normal <a-t> <a-i>
map global normal b v
map global normal B V
map global normal <a-r> <a-i>

# Movement
map global normal n h
map global normal e j
map global normal i k
map global normal o l
map global normal N H
map global normal E J
map global normal I K
map global normal O L

map global normal l b
map global normal u w
map global normal y e
map global normal L B
map global normal U W
map global normal Y E
map global normal <a-l> <a-b>
map global normal <a-u> <a-w>
map global normal <a-y> <a-e>
map global normal <a-L> <a-B>
map global normal <a-U> <a-W>
map global normal <a-Y> <a-E>

map global normal k n
map global normal K N
map global normal <a-k> <a-n>
map global normal <a-K> <a-N>

map global normal <a-n> gi
map global normal <a-o> gl
map global normal <a-N> Gi
map global normal <a-O> Gl
map global normal <a-e> Vjjjjj<esc>
map global normal <a-i> Vkkkkk<esc>

map global normal <c-e> ': lsp-definition<ret>' -docstring "jump to definition (LSP)"
map global normal <c-i> <tab>

# Editing
map global normal a i
map global normal A I

map global normal t a
map global normal T A

map global normal h o
map global normal H O
map global normal <a-h> <a-o>
map global normal <a-H> <a-O>

map global normal z u
map global normal Z U
map global normal <a-z> <a-u>
map global normal <a-Z> <a-U>

map global normal c y
map global normal <a-c> ': copy-primary-to-clipboard<ret>'

map global normal v p
map global normal V P
map global normal <a-v> <a-p>
map global normal <a-V> <a-P>

map global normal w c
map global normal <a-w> <a-c>

map global normal p z
map global normal P Z
map global normal <a-p> <a-z>
map global normal <a-P> <a-Z>

define-command copy-primary-to-clipboard %{
    execute-keys -draft '<space><a-|> xclip -selection clipboard<ret>'
    echo -markup "{Information}Copied %val[selection_length] characters to clipboard"
} -docstring 'Copy primary selection to clipboard'

# Tab completion
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# View
map global goto n h       -docstring "line begin"
map global goto o l       -docstring "line end"
map global view e 'jjjjj' -docstring "scroll down 5 lines"
map global view i 'kkkkk' -docstring "scroll up 5 lines"

# Clients
declare-user-mode client
map global normal <c-w> ': enter-user-mode client<ret>' -docstring 'client mode'
map global client s ': split<ret>'

# Git
declare-user-mode git
map global user v ': enter-user-mode git<ret>' -docstring 'git mode'

map global git s  ': git status<ret>'          -docstring 'status'
map global git d  ': git diff<ret>'            -docstring 'diff'
map global git l  ': git log<ret>'             -docstring 'log'
map global git b  ': git blame<ret>'           -docstring 'toggle blame'
map global git n  ': git next-hunk<ret>vc'     -docstring 'jump to next hunk'
map global git p  ': git prev-hunk<ret>vc'     -docstring 'jump to previous hunk'
map global git a  ': git-add-hunk<ret>'        -docstring 'stage all hunks in the primary selection'

define-command -hidden git-status-jump %{
    try %{
        execute-keys 'xs^\t(?:(?:both )?modified:|added:|new file:|copied:|deleted(?: by \w+)?:|renamed:\s+.*\s->)?\s+([^\n]+)<ret>'
        evaluate-commands -try-client %opt{jumpclient} -verbatim -- edit -existing %reg{1}
        try %{ focus %opt{jumpclient} }
    }
}

hook global WinSetOption filetype=git-status %{
    map buffer normal <ret> ': git-status-jump<ret>'   -docstring 'Jump to file'
    map buffer normal <c-n> ': execute-keys /<lt>c-v<gt><lt>c-i<gt><lt>ret<gt>gi<ret>'             -docstring 'Next changed file'
    map buffer normal <c-p> ': execute-keys gh<lt>a-/<gt><lt>c-v<gt><lt>c-i<gt><lt>ret<gt>gi<ret>' -docstring 'Previous changed file'
}

define-command -hidden git-log-jump %{
    try %{
        execute-keys -draft -save-regs 'c/' 'j<a-/>^commit<ret>xs^commit\s+\K[0-9a-f]+<ret>"cy: git show <c-r>c<ret>'
    }
}

hook global WinSetOption filetype=git-log %{
    map buffer normal <ret> ': git-log-jump<ret>' -docstring 'Jump to commit'
    map buffer normal <c-n> '/^commit<ret>gi'     -docstring 'Next commit'
    map buffer normal <c-p> '<a-/>^commit<ret>gi' -docstring 'Previous commit'
}

define-command -hidden diff-next-change %{
    execute-keys -save-regs / '/@@\s+-\d+,\d+\s\+\d+.\d+\s+@@<ret>jgh'
}
define-command -hidden diff-prev-change %{
    execute-keys -save-regs / 'kgh<a-/>@@\s+-\d+,\d+\s\+\d+.\d+\s+@@<ret>jgh'
}
define-command -hidden diff-jump-to-line %{
    try %{ execute-keys -draft ';<a-?>^diff<ret>: nop %sh{ printf "%s" "$kak_selection" > /tmp/kak-git-show-${kak_session} }<ret>' }
    evaluate-commands %sh{
        parse_diff_segment() {
            perl -e '
                foreach $line (<>) {
                    if ($line =~ /^@@ -(\d+)(?:,\d+)? \+(\d+)(?:,\d+)?/) {
                        $last = "-";
                        $src_lines = $1 - 1;
                        $dst_lines = $2 - 1;
                    } elsif ($line =~ /^--- a\/(.+)/) {
                        $src_file = $1;
                    } elsif ($line =~ /^\+\+\+ b\/(.+)/) {
                        $dst_file = $1;
                    } elsif ($line =~ /^\s/) {
                        $last = " ";
                        $src_lines += 1;
                        $dst_lines += 1;
                    } elsif ($line =~ /^\+/) {
                        $last = "+";
                        $dst_lines += 1;
                    } elsif ($line =~ /^-/) {
                        $last = "-";
                        $src_lines += 1;
                    } elsif ($line =~ /^index (\w+)\.\.(\w+)/) {
                        $src_idx = $1;
                        $dst_idx = $2;
                    }
                    $char = length($line) - 1;
                }
                if ($char < 1) { $char = 1 }

                if ($last eq "+") {
                    print "$dst_idx $dst_file $dst_lines $char\n"
                } else {
                    print "$src_idx $dst_file $src_lines $char\n"
                }
            ' "$1"
        }
        read hash file line col <<< $(parse_diff_segment /tmp/kak-git-show-${kak_session})
        rm /tmp/kak-git-show-$kak_session

        top_line=${kak_window_range%% *}
        offset=$(($kak_cursor_line - $top_line - 1))

        case $(git hash-object $file) in
            "$hash"*)
                echo "edit! $file
                      evaluate-commands -client ${kak_client} select ${line}.${col},${line}.${col}
                      execute-keys -client ${kak_client} vt${offset}vk"
                ;;
            *)
                output="$(mktemp -d -t kak-git-show-XXXXXXXX)/fifo"
                mkfifo ${output}
                ( git show $hash > ${output} 2>&1 && rm -r $(dirname ${output}) ) > /dev/null 2>&1 < /dev/null &
                echo "edit! -fifo ${output} $hash:$file
                      hook buffer BufCloseFifo .* %{
                          evaluate-commands -client ${kak_client} select ${line}.${col},${line}.${col}
                          execute-keys -client ${kak_client} vt${offset}vk
                      }"
                ;;
        esac
    }
}

define-command -hidden git-add-hunk %{
    evaluate-commands %sh{
        git diff -U0 --inter-hunk-context=0 "$kak_buffile" | \
        perl -e '
            if ($ARGV[0] =~ /^(\d+)\.\d+,(\d+)\.\d+$/) {
                $selection_from = ($1<$2?$1:$2);
                $selection_to = ($1>$2?$1:$2);
            } else {
                exit 1;
            }
            $unstaged_correction = 0;
            $in_header = 1;
            $header = "";
            $found = 0;
            while ($line = <STDIN>) {
                if (rindex($line, "@@", 0) == 0) {
                    $in_header = 0;
                    if ($line =~ /^@@ -(\d+,?\d*) \+(\d+),?(\d+)?(.*)/) {
                        $from = $2;
                        $count = $3;
                        if ($from == 0) { $from = 1 }
                        if ($count == 0) { $count = 1 }
                        if ($selection_to >= $from && $selection_from < $from + $count) {
                            $found = 1;
                            print $header;
                            $corrected_line = $2 - $unstaged_correction;
                            print "@@ -$1 +$corrected_line";
                            if ($3 ne "") { print ",$3" }
                            print "$4\n";
                        } elsif ($found) {
                            last
                        }
                    }
                    next
                }

                if ($in_header) {
                    $header = $header.$line;
                } elsif (!$found) {
                    $first_char = substr($line, 0, 1);
                    if ($first_char eq "+") {
                        $unstaged_correction += 1;
                    } elsif ($first_char eq "-") {
                        $unstaged_correction -= 1;
                    }
                } else {
                    print "$line";
                }
            }
            if (!$found) { exit 1 }
        ' "$kak_selection_desc" | \
        git apply --unidiff-zero --cached - || \
        echo "fail 'unable to stage git hunk'"
    }
    git update-diff
}

hook global WinSetOption filetype=git-diff %{
    map buffer normal <c-n> ": diff-next-change<ret>"  -docstring 'Next change'
    map buffer normal <c-p> ": diff-prev-change<ret>"  -docstring 'Previous change'
    map buffer normal <ret> ": diff-jump-to-line<ret>" -docstring 'Jump to changed line'
}

hook global BufWritePost .* %{
    git update-diff
}
