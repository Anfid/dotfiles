eval %sh{
    if ! [ -d $HOME/.config/kak ]; then
      mkdir -p $HOME/.config/kak
    fi
}

eval %sh{
    if ! [ -d $HOME/.config/kak/plugins/plug.kak ]; then
      mkdir -p $HOME/.config/kak/plugins/plug.kak
      git clone https://github.com/andreyorst/plug.kak.git ~/.config/kak/plugins/plug.kak
    fi
}

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

plug "ul/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{
    set-option global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\h\n,=;*(){}\[\]]\z<ret>'"
    set-option global lsp_diagnostic_line_error_sign "✗"
    set-option global lsp_diagnostic_line_warning_sign "⚠"
    hook global WinSetOption filetype=(c|cpp|rust|sh) %{
        map window user "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"
        lsp-enable-window
        lsp-auto-hover-enable
        lsp-auto-hover-insert-mode-disable
        set-option window lsp_hover_anchor false
        set-face window DiagnosticError default+u
        set-face window DiagnosticWarning default+u
    }
    hook global WinSetOption filetype=rust %{
        set-option window lsp_server_configuration rust.clippy_preference="on"
    }
    hook global KakEnd .* lsp-exit
}


plug "andreyorst/fzf.kak" %{
    map global normal '<c-p>' ': fzf-mode<ret>' -docstring 'fzf mode'
    set-option global fzf_preview_width '65%'
    evaluate-commands %sh{
        if [ -n "$(command -v fd)" ]; then
          echo "set-option global fzf_file_command %{fd . --no-ignore --type f --follow --hidden --exclude .git --exclude .svn}"
        else
          echo "set-option global fzf_file_command %{find . \( -path '*/.svn*' -o -path '*/.git*' \) -prune -o -type f -follow -print}"
        fi
        [ -n "$(command -v bat)" ] && echo "set-option global fzf_highlighter bat"
        [ -n "$(command -v rg)" ] && echo "set-option global fzf_sk_grep_command %{$kak_opt_grepcmd}"
    }
}

plug "delapouite/kakoune-text-objects"

plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global tabstop 4
    set-option global indentwidth 4
    set-option global softtabstop 4
    expandtab
} config %{
    hook global WinSetOption filetype=sh %{
        set-option window tabstop 2
        set-option window indentwidth 2
        set-option window softtabstop 2
    }
    hook global WinSetOption filetype=markdown %{
        set-option window tabstop 3
        set-option window indentwidth 3
        set-option window softtabstop 3
    }
    hook global WinSetOption filetype=(makefile|gas) noexpandtab
}

plug "alexherbo2/auto-pairs.kak" %{
    map global user 's' ': auto-pairs-surround<ret>' -docstring "surround selection"
    hook global WinCreate .* %{
        auto-pairs-enable
    }
}

plug 'delapouite/kakoune-buffers' %{
    map global normal <c-space> ': enter-buffers-mode<ret>' -docstring 'buffer list'
    map global normal <a-space> ': fzf-mode<ret>b' -docstring 'buffers (persistent)'
}

plug 'andreyorst/base16-gruvbox.kak' theme config %{
    colorscheme base16-gruvbox-dark-medium
}

plug "andreyorst/powerline.kak" defer powerline %{
    set-option global powerline_format 'powerline-format git bufname filetype mode_info line_column position'
    powerline-toggle line_column off
    powerline-theme gruvbox
} config %{
    powerline-start
}

# TODO: setup
plug "https://gitlab.com/Screwtapello/kakoune-cargo"

set global ui_options ncurses_assistant=none
hook global WinCreate .* %{
    git show-diff
    add-highlighter global/ number-lines -hlcursor
}

# Modes
map global normal "'" ':'
map global normal <a-t> <a-i>
map global normal B v
map global normal b V
#map global normal ' ' ','

# Movement
map global normal n h
map global normal e j
map global normal i k
map global normal o l
map global normal N H
map global normal E J
map global normal I K
map global normal O L

map global normal l b
map global normal u w
map global normal y e
map global normal L B
map global normal U W
map global normal Y E
map global normal <a-l> <a-b>
map global normal <a-u> <a-w>
map global normal <a-y> <a-e>
map global normal <a-L> <a-B>
map global normal <a-U> <a-W>
map global normal <a-Y> <a-E>

map global normal k n
map global normal <A-k> <A-n>
map global normal K N
map global normal <A-K> <A-N>

map global normal <a-n> gi
map global normal <a-o> gl
map global normal <a-N> Gi
map global normal <a-O> Gl
map global normal <a-e> Vjjjjj<esc>
map global normal <a-i> Vkkkkk<esc>

map global normal <c-e> ': lsp-definition<ret>' -docstring "jump to definition (LSP)"

# Editing
map global normal a i
map global normal A I
map global normal t a
map global normal T A
map global normal h o
map global normal H O
map global normal <A-h> <A-o>
map global normal <A-H> <A-O>
map global normal z u
map global normal Z U
map global normal c y
map global normal v p
map global normal V P
map global normal w c

map global normal p z
map global normal P Z
map global normal <a-p> <a-z>
map global normal <a-P> <a-Z>

hook global InsertChar \t %{ try %{
  execute-keys -draft "h<a-h><a-k>\A\h+\z<ret><a-;>;%opt{indentwidth}@"
}}

hook global InsertDelete ' ' %{ try %{
  execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>'
}}

# Readline bindings
map global insert <c-b> <esc>hi          -docstring "move the cursor one character to the left"
map global insert <c-f> <esc>li          -docstring "move the cursor one character to the right"
map global insert <a-b> <esc>b\;i        -docstring "move the cursor one word to the left"
map global insert <a-f> <esc>e\;i        -docstring "move the cursor one word to the right"
map global insert <c-a> <esc>I           -docstring "move the cursor to the start of the line"
map global insert <c-e> <esc>gli         -docstring "move the cursor to the end of the line"

map global insert <c-d> <esc>c           -docstring "delete the character under the anchor"
map global insert <c-u> <esc>Ghc         -docstring "delete from the anchor to the start of the line"
map global insert <c-k> <esc>Glc         -docstring "delete from the anchor to the end of the line"
map global insert <a-d> <esc>ec          -docstring "delete until the next word boundary"
map global insert <c-w> <esc>bc          -docstring "delete until the previous word boundary"

map global insert <c-t> %{
    <esc>:try 'exec H<lt>a-k>[^\n][^\n]<lt>ret>\;dp'<ret>i
}                                        -docstring "exchange the char before cursor with the character at cursor"
map global insert <a-t> %{
    <esc>:try 'exec <lt>a-k>\s<lt>ret>e' catch 'exec <lt>a-i>w'<ret><a-;>BS\s+<ret><a-">\;<space>i
}                                        -docstring "exchange the word before cursor with the word at cursor"
map global insert <a-u> <esc>e<a-i>w~\;i -docstring "uppercase the current or following word"
map global insert <a-l> <esc>e<a-i>w`\;i -docstring "lowercase the current or following word"
map global insert <a-c> <esc>e<a-i>w\;~i -docstring "capitalize the current or following word"

map global insert <c-y> <esc>pi          -docstring "paste after the anchor"

# Tab completion
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# View
map global goto n h       -docstring "line begin"
map global goto o l       -docstring "line end"
unmap global goto h
unmap global goto l
map global view e 'jjjjj' -docstring "scroll down 5 lines"
map global view i 'kkkkk' -docstring "scroll up 5 lines"

hook global BufWritePost .* %{
    git update-diff
}
