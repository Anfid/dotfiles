# ===================================================================
# == Options
# ===================================================================

# How many columns are there, and what are their relative widths?
set column_ratios 1,3,4

# Which files should be hidden? (regular expression)
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

# Show hidden files? You can toggle this by typing 'zh'
set show_hidden True

# Ask for a confirmation when running the "delete" command?
# Valid values are "always", "never", "multiple" (default)
# With "multiple", ranger will ask only if you delete multiple files at once.
set confirm_on_delete never

# Which script is used to generate file previews?
# ranger ships with scope.sh, a script that calls external programs (see
# README.md for dependencies) to preview images, archives, etc.
set preview_script ~/.config/ranger/scope.sh

# Use the external preview script or display simple plain text or image previews?
set use_preview_script true

# Be aware of version control systems and display information.
set vcs_aware true

# Use one of the supported image preview protocols
set preview_images true

# Set the preview image method. Supported methods:
#
# * w3m (default):
#   Preview images in full color with the external command "w3mimgpreview"?
#   This requires the console web browser "w3m" and a supported terminal.
#   It has been successfully tested with "xterm" and "urxvt" without tmux.
#
# * iterm2:
#   Preview images in full color using iTerm2 image previews
#   (http://iterm2.com/images.html). This requires using iTerm2 compiled
#   with image preview support.
#
# * urxvt:
#   Preview images in full color using urxvt image backgrounds. This
#   requires using urxvt compiled with pixbuf support.
#
# * urxvt-full:
#   The same as urxvt but utilizing not only the preview pane but the
#   whole terminal window.
set preview_images_method w3m

# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis true

# Display the directory name in tabs?
set dirname_in_tabs false

# Set a title for the window?
set update_title true

# Draw borders around columns?
set draw_borders true

setlocal path=$HOME/Downloads sort mtime

# ===================================================================
# == Define keys for the browser
# ===================================================================

# Basic
map     Q quit!
map     q quit
copymap q ZZ ZQ

map R     reload_cwd
map <C-r> reset
map <C-l> redraw_window
map <C-c> abort
map <esc> change_mode normal
map ~ set viewmode!

map l display_file
map ? help
map W display_log
map w taskview_open

map '  console
map "  console shell%space
map !  console shell%space
map @  console -p6 shell  %%s
map #  console shell -p%space
map r  chain draw_possible_programs; console open_with%%space
map f  console find%space

# Change the line mode
map Mf linemode filename
map Mi linemode fileinfo
map Mm linemode mtime
map Mp linemode permissions
map Ms linemode sizemtime
map Mt linemode metatitle

# Tagging / Marking
map t       tag_toggle
map ut      tag_remove
map "<any>  tag_toggle tag=%any
map <Space> mark_files toggle=True
map s       toggle_visual_mode
map us      toggle_visual_mode reverse=True
map S       mark_files all=True toggle=True
map uS      mark_files all=True val=False

# For the nostalgics: Midnight Commander bindings
map <F1> help
map <F3> display_file
map <F4> edit
map <F5> copy
map <F6> cut
map <F7> console mkdir%space
map <F8> console delete
map <F10> exit

# In case you work on a keyboard with dvorak layout
map <UP>       move up=1
map <DOWN>     move down=1
map <LEFT>     move left=1
map <RIGHT>    move right=1
map <HOME>     move to=0
map <END>      move to=-1
map <PAGEDOWN> move down=1   pages=True
map <PAGEUP>   move up=1     pages=True
map <CR>       move right=1
#map <DELETE>   console delete
map <INSERT>   console touch%space

# VIM-like
copymap <UP>       i
copymap <DOWN>     e
copymap <LEFT>     n
copymap <RIGHT>    o
copymap <HOME>     gg
copymap <END>      G
copymap <PAGEDOWN> <C-F>
copymap <PAGEUP>   <C-B>

map E  move down=0.5  pages=True
map I  move up=0.5    pages=True
copymap E <C-D>
copymap I <C-U>

# Jumping around
map N     history_go -1
map O     history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse

map gh cd ~
map ge cd /etc
map gu cd /usr
map gd cd /dev
map gl cd -r .
map gL cd -r %f
map go cd /opt
map gv cd /var
map gm cd /media
map gM cd /mnt
map gs cd /srv
map gr cd /
map gR eval fm.cd(ranger.RANGERDIR)
map g/ cd /
map g? cd /usr/share/doc/ranger

# External Programs
map L  edit
map du shell -p du --max-depth=1 -h --apparent-size
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
map yp shell -f echo -n %d/%f | xsel -i; xsel -o | xsel -i -b
map yd shell -f echo -n %d    | xsel -i; xsel -o | xsel -i -b
map yn shell -f echo -n %f    | xsel -i; xsel -o | xsel -i -b

# Filesystem Operations
map =  chmod

map cw console rename%space
map a  rename_append
map A  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"))
map I  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7)

map vv paste
map vo paste overwrite=True
map vV paste append=True
map vO paste overwrite=True append=True
map vl paste_symlink relative=False
map vL paste_symlink relative=True
map vhl paste_hardlink
map vht paste_hardlinked_subtree

map dD console delete

map dd cut
map X  cut
map ud uncut
map da cut mode=add
map dr cut mode=remove
map dt cut mode=toggle

map cc copy
map uc uncut
map ca copy mode=add
map cr copy mode=remove
map ct copy mode=toggle

# Temporary workarounds
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map de  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map di  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map ye  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yi  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# Searching
map /  console search%space
map k  search_next
map K  search_next forward=False
map wt search_next order=tag
map ws search_next order=size
map wi search_next order=mimetype
map wc search_next order=ctime
map wm search_next order=mtime
map wa search_next order=atime

# Tabs
map <C-t>     tab_new ~
map <C-w>     tab_close
map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map <A-Right> tab_move 1
map <A-Left>  tab_move -1
map <A-n>     tab_move 1
map <A-o>     tab_move -1
map gt        tab_move 1
map gT        tab_move -1
map gn        tab_new ~
map gc        tab_close
map uq        tab_restore
map <a-1>     tab_open 1
map <a-2>     tab_open 2
map <a-3>     tab_open 3
map <a-4>     tab_open 4
map <a-5>     tab_open 5
map <a-6>     tab_open 6
map <a-7>     tab_open 7
map <a-8>     tab_open 8
map <a-9>     tab_open 9

# Sorting
map pr set sort_reverse!
map pz set sort=random
map ps chain set sort=size;      set sort_reverse=False
map pb chain set sort=basename;  set sort_reverse=False
map pn chain set sort=natural;   set sort_reverse=False
map pm chain set sort=mtime;     set sort_reverse=False
map pc chain set sort=ctime;     set sort_reverse=False
map pa chain set sort=atime;     set sort_reverse=False
map pt chain set sort=type;      set sort_reverse=False
map pe chain set sort=extension; set sort_reverse=False

map pS chain set sort=size;      set sort_reverse=True
map pB chain set sort=basename;  set sort_reverse=True
map pN chain set sort=natural;   set sort_reverse=True
map pM chain set sort=mtime;     set sort_reverse=True
map pC chain set sort=ctime;     set sort_reverse=True
map pA chain set sort=atime;     set sort_reverse=True
map pT chain set sort=type;      set sort_reverse=True
map pE chain set sort=extension; set sort_reverse=True

map dc get_cumulative_size

# Settings
map ,c    set collapse_preview!
map ,d    set sort_directories_first!
map ,h    set show_hidden!
map <C-h> set show_hidden!
map ,I    set flushinput!
map ,i    set preview_images!
map ,m    set mouse_enabled!
map ,p    set preview_files!
map ,P    set preview_directories!
map ,s    set sort_case_insensitive!
map ,u    set autoupdate_cumulative_size!
map ,v    set use_preview_script!
map ,f    console filter%space

# Bookmarks
map m<any>  enter_bookmark %any
map M<any>  set_bookmark %any
map um<any> unset_bookmark %any

map M<bg>   draw_bookmarks

# Generate all the chmod bindings with some python help:
eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))

# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

# Move around
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)
cmap <a-left>   eval fm.ui.console.move_word(left=1)
cmap <a-right>  eval fm.ui.console.move_word(right=1)

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <A-d>        eval fm.ui.console.delete_word(backward=False)
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

# And of course the emacs way
copycmap <up>        <C-p>
copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>
copycmap <backspace> <C-h>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false

# ===================================================================
# == Pager Keybindings
# ===================================================================

# Movement
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True
pmap  <C-d>       pager_move  down=0.5  pages=True
pmap  <C-u>       pager_move  up=0.5    pages=True
pmap  E           pager_move  down=5
pmap  I           pager_move  up=5

copypmap <UP>       i  <C-p>
copypmap <DOWN>     e  <C-n> <CR>
copypmap <LEFT>     n
copypmap <RIGHT>    o
copypmap <HOME>     g
copypmap <END>      G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>
copypmap <PAGEUP>   p  b  <C-B>

# Basic
pmap     <C-l> redraw_window
pmap     <ESC> pager_close
copypmap <ESC> q Q i <F3>
pmap L      edit_file

# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       i  <C-p>
copytmap <DOWN>     e  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

# Changing priority and deleting tasks
tmap E          eval -q fm.ui.taskview.task_move(-1)
tmap I          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <delete>   eval -q fm.ui.taskview.task_remove()

# Basic
tmap <C-l> redraw_window
tmap <ESC> taskview_close
copytmap <ESC> q Q w <C-c>
